Cobalt Halls is a game where players control one kobold in a tribe, in one tribe of many, in a large, strange world composed of endless halls, rooms, and ruins, sapient weather, strange migratory beasts, and influenced by weird, seemingly malevolant powers.

You control an individual kobold, but choose what you want to focus on. Will you hunt for food to feed your tribe? Explore and gain vital knowledge for improving their lot? Gather materials and craft tools to help others become more efficient? Work on building and improving the tribe's home and their outposts and boltholes? Adopt a leadership role, commanding and managing those kobolds not controlled by a player? Will you learn and help continue the tribes conditions, communing with those who have come before as a shaman? Or will you turn to the powers that influence the world, attempting to either appease them or forward their interests, in exchange for the kinds of power that may greatly strengthen your clan, at the risk of destroying them?

The powers themselves will be (somewhat indirectly) controlled by those players who have "ascended", allowing an additional type of gameplay.

Gameplan:
PART 0:
x Get hooked up to git
x Scaffolding - get a db installed, get latest version of rails installed.

PART 1: BASIC NAVIGATION
x Create a basic data model composed of 8 "rooms" that a "character" can be "moved" between via a "move" method given a room..
x Give each room an individual description that can be viewed by calling a "sees" method for the character's current room.
x Create an additional character that can also be moved between the rooms, and have the "sees" method also return the names of other characters in the same room.
x Add a database level to preserve data between opening and closing app.
Allow user to "observe" a character, and see what messages that character receives without calling a command.
Send character description of new room as a message when entering new room.
Send character description of new character entering when a new character enters same room.
Add connections between rooms and only allow moving characters along connections - 3 axis cardinal with semicardinals as possible connections, with the connections defining the room and direction it's attached to on each end. *consider hexagons instead of octagons?)
Give character a "facing" and display exits based on their current facing and select exits with commands relative to their facing.
Automatically set facing based on connection character arrives from, and allow character to manually set facing.
