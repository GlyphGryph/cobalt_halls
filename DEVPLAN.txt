Cobalt Halls is a game where players control one kobold in a tribe, in one tribe of many, in a large, strange world composed of endless halls, rooms, and ruins, sapient weather, strange migratory beasts, and influenced by weird, seemingly malevolant powers.

You control an individual kobold, but choose what you want to focus on. Will you hunt for food to feed your tribe? Explore and gain vital knowledge for improving their lot? Gather materials and craft tools to help others become more efficient? Work on building and improving the tribe's home and their outposts and boltholes? Adopt a leadership role, commanding and managing those kobolds not controlled by a player? Will you learn and help continue the tribes conditions, communing with those who have come before as a shaman? Or will you turn to the powers that influence the world, attempting to either appease them or forward their interests, in exchange for the kinds of power that may greatly strengthen your clan, at the risk of destroying them?

The powers themselves will be (somewhat indirectly) controlled by those players who have "ascended", allowing an additional type of gameplay.

Gameplan:

SECTION 1: BASIC FRAMEWORK
PART 0: SETUP
x Get hooked up to git
x Scaffolding - get a db installed, get latest version of rails installed.

PART 1: BASIC NAVIGATION
x Create a basic data model composed of 8 "rooms" that a "character" can be "moved" between via a "move" method given a room..
x Give each room an individual description that can be viewed by calling a "sees" method for the character's current room.
x Create an additional character that can also be moved between the rooms, and have the "sees" method also return the names of other characters in the same room.
x Add a database level to preserve data between opening and closing app.
x Send character description of new room as a message when entering new room.
x Allow user to mark a character as being "observed" and only receive messages from "observed" characters.
x Send character description of new character entering when a new character enters same room.
x Add connections between rooms and only allow moving characters along connections - 3 axis cardinal with semicardinals as possible connections, with the connections defining the room and direction it's attached to on each end. *consider hexagons instead of octagons?)
x Give character a "facing" and display exits based on their current facing and select exits with commands relative to their facing.
x Automatically set facing based on connection character arrives from, and allow character to manually set facing.

PART 2: BASIC WEB INTERFACE
x Create a giant text display box and a smaller text submission box. Have it welcome the player to the game.
x Remove the welcome message. Create a websocket for people visiting the website to send messages back and forth and have it return a message to a newly connected person that says welcome to the game and provides some basic stats (number of characters, number of rooms).
x When a message is sent to an observer, broadcast it to all websockets.
x Send a message over the websocket in response to hitting enter in the input box which clears the input box and triggers a "look" command on the first character.
x Create a new "commander" module that forwards commands to a character like the observer receives messages.
x Only trigger the look command when the player types look.
x Implement other commands
x Allow user to create an account and login via the command interface by inputting specific commands.
x Allow user to logout and login as a different account
x Do not allow user to login while already logged into an account
x When an account is created, attach it to a new observer and commander attached to a new character
x Make channels observer and commander specific and only broadcast and receive messages from above responses to appropriate observers and commanders

PART 3: TEST, REVIEW, FIX - CIRCUIT 1
Does all that stuff work? Does it feel right? If not, let's do a round of changing it.
Change hex system to a cardinal coordinate system (should be pretty easy since it's barely really hex)

Part 4: UI IMPROVEMENTS
Add elements to track current status
Add scroll and removal of old elements from display area
Display commands and who command was sent to.

Part 5: STARTING ON GAME MECHANICS
Decide what to do!


PART X-LATER: LOGGING AND HISTORY
Give each character a name
Make sure characters using web interface receive updates of other characters moving in and out of room
Whenever a message is received by an observer, save it in addition to displaying it. Or something like that. Figure out how this should work, so when a person logs in they can see what they missed if they want. Message history for that observer.
Also track commands processed by commanders.
