Next Build:
A game where players join a kobold tribe and need to help keep it fed.

Gameplan:
PART 7: GAME MECHANICS II - CORE GAMEPLAY I - TRIBE I - CLAIMING MEMBERSHIP
Implement Basic Tribe Spec.
x Regenerate a new world on command.
x Spawn five kobold characters in starting room.
Fix container_id disallowing null in db for relationships
x Characters are no longer automatically associated with a kobold when created.
x Create a "tribe" object and associate all newly created kobolds with the newly created tribe.
x Make session channels and Accounts Actionable, fix Actionable
# Give accounts a "tribes" command that lists tribes
x Also list other details of tribes - total kobolds and unclaimed kobolds, and ids of unclaimed kobolds in each tribe.
x Give accounts an "claim" command to associate them with a kobold, but have the command fail if they try to associate with an already claimed kobold or if they have already claimed a kobold.
For character add a "tribe" command that lists tribal details, including all members and their soul status.

PART 8: TEST, REVIEW, FIX 3
Test review and fix full action stack, confirm everything is working


PART X-LATER: LOGGING AND HISTORY
Give each character a name
Make sure characters using web interface receive updates of other characters moving in and out of room
Whenever a message is received by an observer, save it in addition to displaying it. Or something like that. Figure out how this should work, so when a person logs in they can see what they missed if they want. Message history for that observer.
Also track commands processed by commanders.

PART X-LATER: UI IMPROVEMENTS 2
Add ability to add meta-information to individual words, so interactables can be marked as notable and players can do things like click on them to look at them.
Older elements removed over time.
Stop right bar from changing in size when updated
Add the option to provide meta information for text messages, so some can be given special features (like putting actions taken in a different color from things observed)
Display commands and who command was sent to.
Implement Aliases ("go" -> "move")
Implement key generation (3 kobolds in a room get keys "kob1", "kob2", and "kob3" for easy reference)
Impement partial text matching
Add context menu when clicking an interactable item in text window that gives options like "look", "pick up"
Implement a physical navigation menu to right of command box that can handle moving, turning, looking.
Restrict movement options to only valid exits, disable other buttons
Implement an always visible inventory

PART X-LATER: STRUCTURAL IMPROVEMENTS 2
Further Work improving Actionable logic (see ACTIONABLE_SPEC)
Create a "viewable" shared module with appropriate logic, and make sure every object has a first and third person short and long description, and that they are called appropriately
Rework the "Commanders" object since the Actionable library now handles that logic - rework it to direct commands? Might not even need that, though, could be on account, or have one commander associated with each account (or other thing) that can issue commands, like the AI, rather than a commanderassociated with each individual commandable object, to pass "command/order" commands. Actual form TBD, current implementation just isn't good enough, though.

PART X-LATER: TEST, REVIEW, FIX 2
Figure out why we aren't always getting our initial session details in display.
Make sure model instances are always properly reloaded before commands work with them. Stale data has been... a problem.

PART X-LATER: GAME MECHANICS
Allow interacting with objects to change their description. For example, flipped rock shows different image.
Add ability to "use" held objects - including how this fails on objects with no use.
Add ability to "eat" held objects - including how this fails on inedible objects. This destroys the object.
Have "looking" at an object reveal valid verbs for that object
Allow a "door" in a connection to be open or closed
Add ability to "use" objects in room and neighbour connections - for example, opening a door, unlocking a door, flipping a rock.
Add "locked doors" to connections. The lock is accessible from both sides, but may have different requirements - for example, one side requiring a key and the other side not requiring a key to lock or unlock it.
Using a key on a locked door unlocks the door.

==== FINISHED SECTIONS ====

SECTION 1: BASIC FRAMEWORK
PART 0: SETUP
x Get hooked up to git
x Scaffolding - get a db installed, get latest version of rails installed.

PART 1: BASIC NAVIGATION
x Create a basic data model composed of 8 "rooms" that a "character" can be "moved" between via a "move" method given a room..
x Give each room an individual description that can be viewed by calling a "sees" method for the character's current room.
x Create an additional character that can also be moved between the rooms, and have the "sees" method also return the names of other characters in the same room.
x Add a database level to preserve data between opening and closing app.
x Send character description of new room as a message when entering new room.
x Allow user to mark a character as being "observed" and only receive messages from "observed" characters.
x Send character description of new character entering when a new character enters same room.
x Add connections between rooms and only allow moving characters along connections - 3 axis cardinal with semicardinals as possible connections, with the connections defining the room and direction it's attached to on each end. *consider hexagons instead of octagons?)
x Give character a "facing" and display exits based on their current facing and select exits with commands relative to their facing.
x Automatically set facing based on connection character arrives from, and allow character to manually set facing.

PART 2: BASIC WEB INTERFACE
x Create a giant text display box and a smaller text submission box. Have it welcome the player to the game.
x Remove the welcome message. Create a websocket for people visiting the website to send messages back and forth and have it return a message to a newly connected person that says welcome to the game and provides some basic stats (number of characters, number of rooms).
x When a message is sent to an observer, broadcast it to all websockets.
x Send a message over the websocket in response to hitting enter in the input box which clears the input box and triggers a "look" command on the first character.
x Create a new "commander" module that forwards commands to a character like the observer receives messages.
x Only trigger the look command when the player types look.
x Implement other commands
x Allow user to create an account and login via the command interface by inputting specific commands.
x Allow user to logout and login as a different account
x Do not allow user to login while already logged into an account
x When an account is created, attach it to a new observer and commander attached to a new character
x Make channels observer and commander specific and only broadcast and receive messages from above responses to appropriate observers and commanders

PART 3: TEST, REVIEW, FIX 1
Does all that stuff work? Does it feel right? If not, let's do a round of changing it.
x Change hex system to a cardinal coordinate system (should be pretty easy since it's barely really hex)
x Add room names for ease of reference
x Figure out why not displaying look actions
x Figure out why "help" command isn't working.
x Add ability to turn by command
x Figure out why invalid commands give no response instead of an invalid command message
x Reset directions to have 0 be north instead of 1, simplify some of the math. Update direction and character logic.
x Fix problem where adding additional arguments throws errors
x Fix error when moving forward with no args
x Add error handling for all invalid commands
x Registering a second account Test2 fails, fix it
x Reorganize DEVPLAN doc to put finished parts below break

Part 4: UI IMPROVEMENTS
x Add elements to track current status
x Add scroll to display area
x Add js hooks for logging in and out to update appropriate elements
x Require or allow input of string names for directional commands instead of numbers
x figure out why inputs are triggering six times

x Part 5: STARTING ON GAME MECHANICS
x Add objects to rooms
x Add ability to see objects in rooms
x Add ability to look at objects
x Add ability to look at players (including "self")
x Add objects to players
x Add ability to pick up an object
x Add ability to see what a player is holding when looking at a player
x Add ability to drop an object
x Add broadcasts for the pickup and drop actions
x Add ability to describe yourself and add this description to what is displayed when looked at
x Add ability to 'say' things
x Add seed for slightly more expanded default room layout and some default accounts and stuff
x Griffin room request: "Short hallway with six doors, three on each side. You come through a seventh door at the start of the hallway. A door at the other end of the hallway goes to a room with beds. There is a key on the ground in the middle. You'll need to use the key to get through a door later."

PART 6: STRUCTURAL IMPROVEMENTS 1
x Create a shared module Actionable used by characters or things players can control
x Create a standard, genericized format for "actions" so they are defined in a place apart from the normal character logic in a way that works for anything that might execute them


